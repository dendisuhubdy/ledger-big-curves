#!/usr/bin/env python

"""
Implements the Poseidon permutation:
Starkad and Poseidon: New Hash Functions for Zero Knowledge Proof Systems
 - Lorenzo Grassi, Daniel Kales, Dmitry Khovratovich, Arnab Roy, Christian Rechberger, and Markus Schofnegger
 - https://eprint.iacr.org/2019/458.pdf
Other implementations:
 - https://github.com/shamatar/PoseidonTree/
 - https://github.com/iden3/circomlib/blob/master/src/poseidon.js
 - https://github.com/dusk-network/poseidon252
"""

from collections import namedtuple
from poseidon_params import mds, round_constants

p = 0x1C4C62D92C41110229022EEE2CDADB7F997505B8FAFED5EB7E8F96C97D87307FDB925E8A0ED8D99D124D9A15AF79DB26C5C28C859A99B3EEBCA9429212636B9DFF97634993AA4D6C381BC3F0057974EA099170FA13A4FD90776E240000001

_PoseidonParams = namedtuple('_PoseidonParams', ('p', 't', 'nRoundsF', 'nRoundsP', 'e', 'constants_C', 'constants_M'))
DefaultParams = _PoseidonParams(p, 3, 8, 33, 11, round_constants, mds)

def poseidon_mix(state, M, p):
    return [ sum([M[i][j] * x for j, x in enumerate(state)]) % p
             for i in range(len(M)) ]

def poseidon(inputs, params=None, state=None):
    if params is None:
        params = DefaultParams
    assert isinstance(params, _PoseidonParams)
    assert len(inputs) > 0 and len(inputs) < params.t
    if state is None:
        state = [0] * params.t
    else:
        assert len(state) == params.t
        for i in range(len(inputs)):
            state[i] = inputs[i] + state[i]

    # half full rounds
    half = params.nRoundsF//2
    for i in range(half):
        for j in range(params.t):
            state[j] = state[j] + params.constants_C[i][j]          # ARK
        state = [pow(x, params.e, params.p) for x in state]         # x**a
        state = poseidon_mix(state, params.constants_M, params.p)   # MDS

    # partial rounds
    offset = params.nRoundsF//2
    for i in range(params.nRoundsP):
        for j in range(params.t):
            state[j] = state[j] + params.constants_C[i + offset][j] # ARK
        state[0] = pow(state[0], params.e, params.p)                # x[0]**a
        state = poseidon_mix(state, params.constants_M, params.p)   # MDS

    # half full rounds
    offset = params.nRoundsP + params.nRoundsF//2
    for i in range(params.nRoundsF//2):
        for j in range(params.t):
            state[j] = state[j] + params.constants_C[i + offset][j] # ARK
        state = [pow(x, params.e, params.p) for x in state]         # x**a
        state = poseidon_mix(state, params.constants_M, params.p)   # MDS
    print(state)
    return state[0]

if __name__ == "__main__":
    msgs = [[240717916736854602989207148466022993262069182275],
       [240717916736856083605108215037963941411481087821],
       [240717916736854598292360696510787486996073117253],
       [0]]
    state = [[11755705189390821252061646515347634803721008034042221776076198442214047097736416191977544342102890624152325311676405596068127350375523649920335519154711182264164630561278473895587364446094244598242170557714936573775626048265230,
    27515311459815300529244367822740863112445008780714100624704075938494921938258491804705259071021760016622352448625351667277308772230882264292787686108079884001293592223592113739068864847707009580257641842924278675467231562803771,
    2396632434414439310737449031743778257385962871664374090342438175577792963806884089307026050137579268946498687720760431246070701978535951122430182545476853420233411791434797499475546364343179083506203526451182750041179531584522],
    [24341961192682957976528713867896718267802514525608179163038431088957380255238148947966553318475122486385689169865843674688259772170774897200006501044592562775146371270239803213089333281332791538737728339660194402901356418462758,
    18224768784793472193818342531974732507375802141911175730510427250745989717476712789732404502097870291611504005148052926307457425647585391582745622535456140698710270052661633861945779806393216494112206150363378559461764675150019,
    24275567241967455066895987376195669675464660419387611943726566148619049658147070921069671853559534046019384462399261519316012965282655704040635022637030885350053672338475287674944526907726691136522014116807515847622063524729215],
    [10750110435767046983454045187671099514739733034566671521925896662668294860264709060384236385295463432545325451980016479659913827658594515079120134623071305934006485197771950662022752967275205776146414789256179852832585246277135,
    8904455874005639433592278235532509199702939465001270112155953999636926342280273055763340728158647285485979535981075100188059611800277960438095719726511925245756237924437620016602630288663342596748711971774951187120855819006254,
    32530237352315271838115261734720283499544522470073175811970824147732315975479559777637890800660222426763032867915025114471287205710769908680232969801493216312164238036604377671062479707846578922656464522981144652357387637752612],
    [34862842728213847749764780789494678728670423208602929571896961056573803098074132905304873030635377933739117043619468734830991448221869197939483134103171107112118584937110067067547102424492071823030360093209596106303243891804197,
    17081227013397223905512048865245015172588387142622756033708188882141875904207452273551785481563105856198959587137267960219725430124795159846635170869198394793534706044519183438281433645289205371329733705735120518132198922596081,
    38222598208661293154358098467913225947501468879718283947325552423417581445633039988767989340378891826663231756617039996089956309806010436055674976914944611798818889926367328052912099929296285277861067843021509088943796472188515]]
    for i in range(len(msgs)):
        print(msgs[i])
        print(state[i])
        assert poseidon(msgs[i]) == state[i]
